2.1.6 变量
变量包括局部变量、除了常量外的类成员变量。
G.NAM.06 变量采用小驼峰命名
【级别】 建议
【描述】
class MyClass {
public static final int TIME_INTERVAL = 1000;
public static final String APPLICATION_NAME = "Launcher";
}
interface Moveable {
String APPLICATION_NAME = "Launcher";
}
enum Size {SMALL, MEDIUM, LARGE};
static int MAXUSERNUM = 200;
static String sL = "Launcher";
static final int NUM_FIVE = 5;
static final int NUM_5 = 5;
static final int MAX_USER_NUM = 200;
static final String APPLICATION_NAME = "Launcher";
static final int MAX_FILE_NUM = 5; 
变量的名字通常是名词或名词短语，应采用小驼峰命名。有集合意义的变量，命名时尽量采用复数形
式。
即使局部变量是final或不可改变（immutable）的，也不应该把它视为常量，应采用小驼峰命名。
该建议也适用于方法参数。
【反例】
【正例】
G.NAM.07 避免使用具有否定含义布尔变量名
【级别】 建议
【描述】
对具有否定含义的布尔型变量进行逻辑非运算，会导致代码不好理解，如!isNotError 。
【反例】
G.NAM.08 布尔型变量建议以表达是非意义的动词开头
【级别】 建议
【描述】
布尔型的变量建议以表达是非意义的动词开头，如is （JavaBeans经常被使用）、has 、can 、
should 等。
JavaBeans规范会对布尔型的类属性自动生成isXxx() 的getter，例如类属性isCompleted可能会生成
方法isIsCompleted()。为避免部分自动化处理工具（如Spring，IDE，Lombok等）对布尔型的类属性
的意外处理，类似场景下，不强制要求布尔型类属名以is 开头。对于这样的问题，也可以通过在IDE中
定制getter/setter代码生成模版，例如常用序列化框架可通过注解的方式设置序列化属性名。
【正例】
String customername;
List<String> user = new ArrayList<>(DEFAULT_CAPACITY);
String customerName;
List<String> users = new ArrayList<>(DEFAULT_CAPACITY);
boolean isNoError;
boolean isNotFound;
// Gson中
@SerializedName(value = "emailAddress", alternate = {"email", "email_address"})
protected String emailAddress;
// Fastjson中
@JSONField(name = "isGranted", alternateNames = {"is_granted", "is-granted", "granted"})
protected Boolean isGranted;
boolean isError;
boolean hasLicense;
boolean canEvaluate;
boolean shouldAbort = false;

2.2 注释
Java中有3种标记注释的方式： // （注释单行内容）、/* */ （注释连续多行内容）、/** */
（Javadoc注释）。
P.01 注释跟代码一样重要，应按需注释
【描述】
尽量通过清晰的软件架构、良好的标识符命名来提高代码可读性；在需要的时候，才辅以注释说明。对
晦涩难懂的代码、命名，应该进行重构而不是添加注释。
注释是为了帮助阅读者快速读懂代码，所以要从读者的角度出发，按需注释。注释内容要简洁、明了、
无歧义，信息全面且不冗余，不应简单地复制类/接口/方法的名字。
需要注释的地方没有注释，代码则难以被读懂；而包含无用、重复信息的冗余注释不仅浪费维护成本，
还会弱化真正有用的注释，最终让所有注释都不可信。
修改代码时，也要保证其相关注释的一致性。只改代码不改注释是一种非专业的编程习惯，破坏了代码
与注释的一致性，影响程序代码的阅读、理解、修改、测试与维护。
使用通顺的中文或英文进行注释。为降低沟通成本，应使用团队内最擅长、沟通效率最高的语言写注
释；注释语言由开发团队统一决定。
2.2.1 Javadoc
Javadoc注释是指代码中使用/** */ 进行的注释，对这些注释可以使用Javadoc工具生成一个HMTL文
档。这类注释一般用于：
包；
公有类和接口；
类的公有和受保护的属性；
类的公有和受保护的方法（含构造方法）。
Javadoc注释的基本格式如下所示：
或者是以下单行形式：
当整个Javadoc块能容纳于一行时（且没有Javadoc标签@XXX），可以使用单行形式。正文中的链接或
跳转使用<a href=.../a> ， {@link ... } ；示例代码片段，单行使用{@code ... } ，多行使用
<pre>...</pre> ，需转义尖括号（ < ）时组合使用<pre>{@code ... }</pre> 。
Javadoc工具详细使用说明可参见Javadoc官方文档。
G.CMT.01 public或protected修饰的元素应添加Javadoc注释
【级别】建议
/**
* 这里写有多行Javadoc文本，
* 其它. . .
*/
public int doSomething(final String foo) {
...
}
/** 一个较短的Javadoc. */
public static final Pattern PREFIX_REG = Pattern.compile("[\\w-]+");

【描述】
最低限度要为每个public或protected修饰的类、接口、枚举、类方法和类属性添加注释，这些注释的
格式应该采用Javadoc注释格式（即使用/** */ 进行注释），除此之外按需添加Javadoc注释。实现接
口方法时，其Javadoc允许使用{@inheritDoc}。
【例外】
1. 对于setter/getter这类“简单，明显”的方法，不强制要求添加Javadoc注释，例如getFoo() ，如果
无需注释可以省略，也可以简单注释“返回foo”。
2. 对于override覆盖超类的方法可以不添加Javadoc注释。
3. 已使用JUnit框架默认的BeforeClass、 AfterClass注解，无需Javadoc。
G.CMT.02 顶层public类的Javadoc应该包含功能说明和创建日期信息
【级别】 建议
【描述】
顶层public类的Javadoc中应该有功能说明、@since信息。产品自主决定是否添加@author（作者信
息），其中名字（拼音或英文）可选，工号与邮箱不推荐添加到注释中；对外开源的代码不推荐添加
@author。功能说明与@标签之间需要空1行。日期格式为Java 8 time包中的ISO_DATE，例如“2011-
12-03”或者“2011-12-03+01:00”。
可参考：
可增加其它的javadoc tag标签（例如@param 类型参数、@see等），包含了@apiNote 的顶层类头格
式如下：
编写文件头或顶层类头注释应注意：
禁止空有格式，无内容。
如上述例子，如果选项 @apiNote 后面无内容，则应整行删除。
业界Java源码中一般没有History信息，History在配置库里面可以查询，不建议在Java源码的注释
中包含History。
顶层public类头中创建日期的@since标签中的年份应该与版权中的起始年份相同。
G.CMT.03 方法的Javadoc中应该包含功能说明，根据实际需要按顺序使用
@param、@return、@throws标签对参数、返回值、异常进行注释
【级别】 建议
【描述】
/**
* 功能描述
*
* @author 王二
* @since 2012-12-22（或版本号）
*/
/**
* 功能描述
*
* @apiNote: 特别需要注意的信息
*
* @author 王二
* @since 2012-12-22（或版本号）
*/

书写方法的Javadoc时，推荐用Java 8新增的@implSpec，@apiNote和@implNote对注释内容进行分类
描述（不强制要求对存量代码进行修改）。各标签的排列顺序如下：
功能描述，说明API的原理、意图、契约（前置与后置条件）等。功能描述与后面的各种标签之间
需要空1行。
@implSpec：特定于API实现的规格说明，让实现者决定是否覆盖。
@apiNote：说明API的注意事项，包括是否允许null、是否线程安全、算法复杂度、输入输出范
围、非受检异常等。
@implNote：特定于API实现的备注，让实现者参考。
@param：注释方法的参数。
@return：注释方法的返回值。
@throws：注释方法抛出的所有类型的异常，包括受检异常和运行时异常。将运行时异常文档
化，可有效描述方法被成功执行的前提条件。
@Deprecated：如果方法被废弃，添加该标签。
上述标签中，除了@Deprecated，不允许空的描述出现。某标签中的内容需多行显示时，新行内容应从
@位置缩进4个空格来对齐。
@implSpec|@apiNote|@implNote与@param|@return|@throws这两组标签之间需要空1行。
【正例】
【例外】
1. 公司ETS单元测试代码对Javadoc注释已有专门的tag要求；
2. 某些系统API设计为对外隐藏时，允许使用tag @hide ；
3. 业界流行工具Android Studio（查看是否去选Settings - Align parameter descriptions）、IDEA
等，对一个tag中的描述文字过长而进行换行时，缩进与上一行描述文字对齐，也是可以的。多个
/**
* 对示例接口的概述介绍
*
* @since 2019-01-01
*/
protected abstract class Sample {
/**
* 这是一段长注释，要根据注释内容进行合理拆分为多行注释...
* 这是第二行注释。
* 符合： 功能说明要与下面的@标签之间保留一个空行
*
* @param fox 参数fox的说明，例如：与懒狗进行挑战的狐狸对象
* @return 方法返回值的说明，例如：返回狐狸与狗的交战结果
*/
protected abstract int foo(Fox fox);
/**
* 函数的功能说明，例如：实现狐狸与懒狗的对战过程。
* 符合： 功能说明要与下面的@标签之间保留一个空行
*
* @return 方法返回值的说明，例如：返回狐狸与狗的交战结果
* @throws ProblemException 异常说明，例如：懒狗死亡抛出该异常
*/
protected int bar() throws ProblemException {
// 变量注释
var aVar = ...;
// 方法注释 符合：注释要与前面的代码之间保留一个空行
doSome();
}
}

tag的描述文字不用对齐，参见G.FMT.14 不应插入空格水平对齐。
G.CMT.04 不写空有格式的方法头注释
【级别】 建议
【描述】
前面已经对需要添加注释的方法给出了明确的范围，对于不需要添加注释的方法无需添加空有格式的注
释，这样代码更整洁。
2.2.2 文件头注释
G.CMT.05 文件头注释应该包含版权许可信息
【级别】 建议
【描述】
文件头注释必须放在package和import之前，必须包含版权许可信息，如果需要在文件头注释中增加其
他内容，可以在后面以相同格式补充。版权许可不应该使用javadoc样式或单行样式的注释，必须从文
件顶头开始。如果包含“关键资产说明”类注释，则应紧随其后。
版权许可内容及格式必须如下：
中文版：
英文版：
关于版本说明，应注意：
2012-2020 根据实际需要可以修改。
2012 是文件首次创建年份，而 2020 是最后文件修改年份。二者可以一样，如 "2020-2020"。
对文件有重大修改时，必须更新后面年份，如特性扩展，重大重构等。
版权说明可以使用华为子公司。
如：版权所有 (c) 海思半导体 2012-2020
或英文：Copyright (c) Hisilicon Technologies Co., Ltd. 2012-2020. All rights reserved.
2.2.3 代码注释
G.CMT.06 注释与代码之间应该有空行或空格，注释符与注释内容之间应该有空格
【级别】 建议
【描述】
类级成员（一般是类或接口中的属性、方法，嵌套类/内部类依此类推），注释与上面的代码之间加一
个空行，但是如果上面已经是本范围（一般是个大括号），则不用加空行。
非public非protected的方法，命名无法表达的信息，应该加注释辅助说明，方法头注释统一放在方法
声明或定义上方。
/*
* 版权所有 (c) 华为技术有限公司 2012-2020
*/
/*
* Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
*/

1. 在方法内部（语句级），注释与上面的代码之间可以考虑加一个空行，以便更加清晰。对于本范围
内的最开始位置的注释，注释前不需要空行。
【正例】
2. 代码右边的注释，与代码之间，至少留1空格。
通常使用扩展后的TAB键即可实现1-4空格的缩进。
多条if else if 或switch/case 场景下的条件注释，为了更清晰，考虑注释放在else if 同行或者
在块内都行，但不是在else if 之前，避免以为注释是关于它所在块的。
针对单个条件注释时，考虑选择并统一使用在block的右边注释或者上方注释的风格之一，不应该在单
个条件block的底部对本条件注释，这样会有歧义。
【反例】
/**
* 对示例接口的概述介绍
*
* @since 2019-01-01
*/
public interface Example {
// 类成员变量注释 符合：类中的第一行代码注释前不需要空行
String aField = ...;
// 类成员变量注释 符合：注释要与前面的代码之间保留一个空行
String bField = ...;
/**
* 这是一段长注释，要根据注释内容进行合理拆分为多行注释...
* 这是第二行注释。
* 符合： 功能说明要与下面的@标签之间保留一个空行
*
* @param fox 参数fox的说明，例如：与懒狗进行挑战的狐狸对象
* @return 方法返回值的说明，例如：返回狐狸与狗的交战结果
*/
int foo(Fox fox);
/**
* 函数的功能说明，例如：实现狐狸与懒狗的对战过程。
* 符合： 功能说明要与下面的@标签之间保留一个空行
*
* @return 方法返回值的说明，例如：返回狐狸与狗的交战结果
* @throws ProblemException 异常说明，例如：懒狗死亡抛出该异常
*/
default int bar() throws ProblemException {
// 变量注释 符合：函数的首行代码注释前不需要空行
var aVar = ...;
// 方法注释 符合：注释要与前面的代码之间保留一个空行
doSome();
}
}
int foo = 100; // 变量注释
int bar = 200; // 变量注释
if (nr % 15 == 0) { // 当nr可被3和5同时整除
System.out.println("fizzbuzz");
// 当nr只能被3整除，不能被5整除 不符合：该注释是当前条件还是下个条件?易误解
} else if (nr % 3 == 0) { // 当nr只能被3整除，不能被5整除
// 此处指打印fizz

G.CMT.07 不用的代码段包括import，直接删除，不要注释掉
【级别】 建议
【描述】
不用的import，增加了代码的耦合度，不利于维护。
被注释掉的代码，无法被正常维护；当企图恢复使用这段代码时，极有可能引入易被忽略的缺陷。
正确的做法是，不需要的代码直接删除掉。若再需要时，考虑移植或重写这段代码。
这里说的注释掉代码，包括用 /** */ ， /* */ 和 // 。
G.CMT.08 正式交付给客户的代码不应包含TODO/FIXME注释
【级别】 建议
【描述】
TODO注释一般用来描述已知待改进、待补充的修改点。
FIXME注释一般用来描述已知缺陷。
它们都应该有统一风格，方便文本搜索统一处理。如：
在版本开发阶段，可以使用此类注释用于突出标注；交付前应该全部处理掉。
2.3 格式
2.3.1 源文件
G.FMT.01 源文件编码格式（包括注释）应该是UTF-8
【级别】 建议
【描述】
对于源文件，应统一采用UTF-8进行编码。另外，对于资源文件（如xml、yml、properties等配置文
件）等也应该采用UTF-8进行编码。
G.FMT.02 一个源文件按顺序包含版权、package、import、顶层类，且用空行
分隔
【级别】 建议
【描述】
System.out.println("fizz");
} else if (nr % 5 == 0) {
// 当nr只能被5整除，不能被3整除
// 此处只打印buzz
System.out.println("buzz");
} else {
// 其他场景会打印数值nr
System.out.println(nr);
}
// TODO(<author-name>): 补充XX处理
// FIXME: XX缺陷

一个源文件中应按顺序包含以下信息：
1. 许可证或版权信息；
2. package语句，且语句内不换行；
3. import语句，且语句内不换行，不能用通配符*；
4. 顶级类（只有一个），所在.java源文件与它同名。
以上每个部分之间用一个空行隔开。
【例外】
package-info.java，是一种特殊的源文件，允许有注解。它有三个作用：
为标注在包上Annotation提供便利，注解应用于整个包；
声明包的私有类和常量；
提供应用于整个包的整体注释说明。
G.FMT.03 import包应该按照先安卓、华为公司、其它商业组织、其它开源第三
方、net/org开源组织、最后java的分类顺序出现，并用一个空行分组
【级别】 建议
【描述】
静态导入置于所有其他导入之上（与常规导入一样的排序方式）。
从上往下，大致分类是：import static、安卓、华为公司com.huawei.*、其它商业组织com.*、其它开
源第三方xxx.yyy.*、net/org开源组织、javacard、Java最基础的包、Java的其它包、Java的扩展包。
每一类内部按照字母顺序排序。几大分类也大致是按字母排序（android、com、net、org），只是
java/javax在最后。
Java最基础的包，是指java.base模块中的包，参照java.base中的包清单。Java的其它包，是指
java.base模块之外的其它SE模块的包。
三方开源，包含了商业公司的开源，例如com.alibaba.fastjson，com.intellij.openapi等，与非盈利组
织的开源，例如net/org组织的。这里，“其它”，就是指除了前缀为com、net、org之外的其它三方开
源，例如下面示例中的lombok、maven。
这个风格兼容于安卓的import顺序，如果没有最上面的安卓包，也适用于非安卓。
【正例】
/**
* 将包中所有方法参数默认设置为@NonNull
*/
@ParametersAreNonnullByDefault
package com.huawei.mydomain.myproduct.mymodule;
import javax.annotation.ParametersAreNonnullByDefault;
...
import static all.statics.imports; // 静态导入
import android.xx.Yyz; // 安卓
import androidx.xx.Yyz; // 安卓
import com.android.xx.Yyz; // 安卓

G.FMT.04 一个类或接口的声明部分应该按照类变量、静态初始化块、实例变量、
实例初始化块、构造器、方法的顺序出现，且用空行分隔
【级别】 建议
【描述】
一个类或接口的声明部分应该按照以下顺序排列：
类（静态）变量
静态初始化块
实例变量
实例初始化块
构造器
方法或嵌套类，嵌套类可以与成员方法根据业务逻辑交替出现，把概念上相近的放在一起，无需把
所有嵌套类都下移至文件底部
类（静态）变量、实例变量、构造器，均按访问修饰符从大到小排列：public、protected、
package（default）、private
说明：
1. 对于自注释成员变量之间可以不加空行；
2. 非自注释成员变量应该加注释且成员变量间以空行分隔。
【例外】
类中的LOG控制开关和TAG的声明，修饰符定义为private static final ，允许放在类中的最前面。
包括TAG、mTAG、STAG、DBG、DEBUG、logger、xxxLogger，不以名字的大小写区分。
2.3.2 大括号
G.FMT.05 在条件语句和循环块中应该使用大括号
